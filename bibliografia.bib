%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% ARTICLE

@ARTICLE{Hao:2008bs,
  author       = {Hao, Yang and Foster, Robert},
  title        = {Wireless Body Sensor Networks for Health-Monitoring Applications},
  journal      = {Physiological Measurement},
  year         = {2008},
  volume       = {29},
  number       = {11},
  pages        = {27-56},
}





@article{avizienis_basic_2004,
	title = {Basic concepts and taxonomy of dependable and secure computing},
	volume = {1},
	issn = {1545-5971},
	doi = {10.1109/TDSC.2004.2},
	number = {1},
	journal = {IEEE Transactions on Dependable and Secure Computing},
	author = {Avizienis, A. and Laprie, J.-C. and Randell, B. and Landwehr, C.},
	month = jan,
	year = {2004},
	keywords = {65, attacks, Availability, Books, Communication system security, data privacy, dependable computing, errors, failures, fault forecasting, fault forecasting., fault prevention, fault removal, faults, fault tolerance, fault tolerant computing, Index Terms- Dependability, Maintenance, Safety, secure computing, security, security of data, software reliability, Standardization, system attacks, system availability, system failures, system integrity, system maintainability, system recovery, system reliability, system safety, system security, system vulnerabilities, taxonomy, trust, Uncertainty, vulnerabilities},
	pages = {11--33}
}



@Article{Bahar1997,
author="Bahar, R.I.
and Frohm, E.A.
and Gaona, C.M.
and Hachtel, G.D.
and Macii, E.
and Pardo, A.
and Somenzi, F.",
title="Algebric Decision Diagrams and Their Applications",
journal="Formal Methods in System Design",
year="1997",
volume="10",
number="2",
pages="171--206",
abstract="In this paper we present theory and experimental results on Algebraic Decision Diagrams. These diagrams extend BDDs by allowing values from an arbitrary finite domain to be associated with the terminal nodes of the diagram. We present a treatment founded in Boolean algebras and discuss algorithms and results in several areas of application: Matrix multiplication, shortest path algorithms, and direct methods for numerical linear algebra. Although we report an essentially negative result for Gaussian elimination per se, we propose a modified form of ADDs which appears to circumvent the difficulties in some cases. We discuss the relevance of our findings and point to directions for future work.",
issn="1572-8102",
doi="10.1023/A:1008699807402",
}




@article{bencomo:2012,
  author    = {Nelly Bencomo and
               Svein O. Hallsteinsen and
               Eduardo Santana de Almeida},
  title     = {A View of the Dynamic Software Product Line Landscape},
  journal   = {IEEE Computer},
  volume    = {45},
  number    = {10},
  year      = {2012},
  pages     = {36-41},
  ee        = {http://doi.ieeecomputersociety.org/10.1109/MC.2012.292},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}


@Article{classen2012,
author="Classen, Andreas and Cordy, Maxime and Heymans, Patrick and Legay, Axel
	and Schobbens, Pierre-Yves",
title="Model checking software product lines with {SNIP}",
journal="International Journal on Software Tools for Technology Transfer",
year="2012",
month="Oct",
day="01",
volume="14",
number="5",
pages="589--612",
abstract="We present SNIP, an efficient model checker for software product
	lines (SPLs). Variability in software product lines is generally
	expressed in terms of features, and the number of potential products is
	exponential in the number of features. Whereas classical model checkers
	are only capable of checking properties against each individual product
	in the product line, SNIP exploits specifically designed algorithms to
	check all products in a single step. This is done by using a concise
	mathematical structure for product line behaviour, that exploits
	similarities and represents the behaviour of all products in a compact
	manner. Specification of an SPL in SNIP relies on the combination of
	two specification languages: TVL to describe the variability in the
	product line, and fPromela to describe the behaviour of the individual
	products. SNIP is thus one of the first tools equipped with
	specification languages to formally express both the variability and
	the behaviours of the products of the product line. The paper assesses
	SNIP and suggests that this is the first model checker for SPLs that
	can be used outside the academic arena.",
issn="1433-2787",
doi="10.1007/s10009-012-0234-1",
}




@article{classen_featured_2013,
	title = {Featured {Transition} {Systems}: {Foundations} for {Verifying} {Variability}-{Intensive} {Systems} and {Their} {Application} to {LTL} {Model} {Checking}},
	volume = {39},
	issn = {0098-5589},
	shorttitle = {Featured {Transition} {Systems}},
	doi = {10.1109/TSE.2012.86},
	number = {8},
	journal = {IEEE Transactions on Software Engineering},
	author = {Classen, A. and Cordy, M. and Schobbens, P.-Y. and Heymans, P. and Legay, A. and Raskin, J.-F.},
	year = {2013},
	keywords = {Automata, automata-based approach, automata theory, Domain engineering, featured transition systems, features, formal logic, formal methods, Formal verification, FTS model checking algorithm, INTERESSANTE, Labeling, linear time logic model checking, LTL model checking, Mathematical model, model checker, model checking, Quality assurance, quality assurance techniques, Requirements/Specifications, Reusable Software, Reuse models, Semantics, SNIP, Software, Software Engineering, software product line engineering, software product lines, Software/Program Verification, software quality, Software/Software Engineering, Specification, Unified Modeling Language, variability, variability-intensive system verification, verification},
	pages = {1069--1089}
}


@article{classen_formal_2014,
	title = {Formal semantics, modular specification, and symbolic verification of product-line behaviour},
	volume = {80, Part B},
	issn = {0167-6423},
	doi = {10.1016/j.scico.2013.09.019},
	journal = {Science of Computer Programming},
	author = {Classen, Andreas and Cordy, Maxime and Heymans, Patrick and Legay, Axel and Schobbens, Pierre-Yves},
	month = feb,
	year = {2014},
	keywords = {Feature, Language, software product line, Specification, verification},
	pages = {416--439},
	file = {Classen et al. - 2014 - Formal semantics, modular specification, and symbo.pdf:/home/andlanna/.zotero/zotero/ffazohx1.default/zotero/storage/SCDJG66N/Classen et al. - 2014 - Formal semantics, modular specification, and symbo.pdf:application/pdf}
}



@article{ghezzi_model-based_2013,
	title = {Model-based verification of quantitative non-functional properties for software product lines},
	volume = {55},
	doi = {10.1016/j.infsof.2012.07.017},
	number = {3},
	journal = {Information and Software Technology},
	author = {Ghezzi, Carlo and Sharifloo, Amir Molzam},
	month = mar,
	year = {2013},
	keywords = {INTERESSANTE, non-functional requirements, Parametric verification, probabilistic model checking, Quality analysis, software product lines},
	pages = {508--524},
}



@article{gonzalez-huerta_validating_2015,
	title = {Validating a model-driven software architecture evaluation and improvement method: {A} family of experiments},
	volume = {57},
	issn = {0950-5849},
	shorttitle = {Validating a model-driven software architecture evaluation and improvement method},
	doi = {10.1016/j.infsof.2014.05.018},
	abstract = {Context
Software architectures should be evaluated during the early stages of software development in order to verify whether the non-functional requirements (NFRs) of the product can be fulfilled. This activity is even more crucial in software product line (SPL) development, since it is also necessary to identify whether the NFRs of a particular product can be achieved by exercising the variation mechanisms provided by the product line architecture or whether additional transformations are required. These issues have motivated us to propose QuaDAI, a method for the derivation, evaluation and improvement of software architectures in model-driven SPL development.
Objective
We present in this paper the results of a family of four experiments carried out to empirically validate the evaluation and improvement strategy of QuaDAI.
Method
The family of experiments was carried out by 92 participants: Computer Science Master’s and undergraduate students from Spain and Italy. The goal was to compare the effectiveness, efficiency, perceived ease of use, perceived usefulness and intention to use with regard to participants using the evaluation and improvement strategy of QuaDAI as opposed to the Architecture Tradeoff Analysis Method (ATAM).
Results
The main result was that the participants produced their best results when applying QuaDAI, signifying that the participants obtained architectures with better values for the NFRs faster, and that they found the method easier to use, more useful and more likely to be used. The results of the meta-analysis carried out to aggregate the results obtained in the individual experiments also confirmed these results.
Conclusions
The results support the hypothesis that QuaDAI would achieve better results than ATAM in the experiments and that QuaDAI can be considered as a promising approach with which to perform architectural evaluations that occur after the product architecture derivation in model-driven SPL development processes when carried out by novice software evaluators.},
	journal = {Information and Software Technology},
	author = {Gonzalez-Huerta, Javier and Insfran, Emilio and Abrahão, Silvia and Scanniello, Giuseppe},
	month = jan,
	year = {2015},
	keywords = {ATAM, Family of experiments, Meta-analysis, Quality attributes, Software architecture evaluation methods, Software architectures},
	pages = {405--429},
	file = {Gonzalez-Huerta et al. - 2015 - Validating a model-driven software architecture ev.pdf:/home/andlanna/.zotero/zotero/ffazohx1.default/zotero/storage/VABMV8EX/Gonzalez-Huerta et al. - 2015 - Validating a model-driven software architecture ev.pdf:application/pdf}
}




@article{heradio_bibliometric_2016,
	title = {A bibliometric analysis of 20 years of research on software product lines},
	volume = {72},
	doi = {10.1016/j.infsof.2015.11.004},
	journal = {Information and Software Technology},
	author = {Heradio, Ruben and Perez-Morago, Hector and Fernandez-Amoros, David and Javier Cabrerizo, Francisco and Herrera-Viedma, Enrique},
	month = apr,
	year = {2016},
	pages = {1--15}
}



@article{kramer_conic:_1983,
	title = {{CONIC}: an integrated approach to distributed computer control systems},
	volume = {130},
	shorttitle = {{CONIC}},
	doi = {10.1049/ip-e.1983.0001},
	number = {1},
	journal = {Computers and Digital Techniques, IEE Proceedings E},
	author = {Kramer, J. and Magee, J. and Sloman, M. and Lister, A.},
	month = jan,
	year = {1983},
	keywords = {computerised control, CONIC, DCCS, distributed computer control systems, distributed control, integrated approach, modular structure, Software, software structure},
	pages = {1--},
	file = {Kramer et al. - 1983 - CONIC an integrated approach to distributed compu.pdf:/home/andlanna/.zotero/zotero/ffazohx1.default/zotero/storage/KDKQ6CGA/Kramer et al. - 1983 - CONIC an integrated approach to distributed compu.pdf:application/pdf}
}



@article{machado_strategies_2014,
	title = {On strategies for testing software product lines: {A} systematic literature review},
	volume = {56},
	shorttitle = {On strategies for testing software product lines},
	doi = {10.1016/j.infsof.2014.04.002},
	number = {10},
	journal = {Information and Software Technology},
	author = {Machado, Ivan do Carmo and McGregor, John D. and Cavalcanti, Yguaratã Cerqueira and de Almeida, Eduardo Santana},
	month = oct,
	year = {2014},
	keywords = {software product lines, software quality, Software testing, Systematic literature review},
	pages = {1183--1199}
}


@article{plath_feature_2001,
	title = {Feature integration using a feature construct},
	volume = {41},
	doi = {10.1016/S0167-6423(00)00018-6},
	number = {1},
	journal = {Science of Computer Programming},
	author = {Plath, Malte and Ryan, Mark},
	month = sep,
	year = {2001},
	keywords = {feature interaction, features, model checking},
	pages = {53--84},
	file = {Plath and Ryan - 2001 - Feature integration using a feature construct.pdf:/home/andlanna/.zotero/zotero/ffazohx1.default/zotero/storage/PF9NISB2/Plath and Ryan - 2001 - Feature integration using a feature construct.pdf:application/pdf}
}



@article{rodrigues_dependability_2012,
	series = {Dynamic {Analysis} and {Testing} of {Embedded} {Software}},
	title = {Dependability analysis in the {Ambient} {Assisted} {Living} {Domain}: {An} exploratory case study},
	volume = {85},
	issn = {0164-1212},
	shorttitle = {Dependability analysis in the {Ambient} {Assisted} {Living} {Domain}},
	doi = {10.1016/j.jss.2011.07.037},
	number = {1},
	journal = {Journal of Systems and Software},
	author = {Rodrigues, Genaína Nunes and Alves, Vander and Silveira, Renato and Laranjeira, Luiz A.},
	month = jan,
	year = {2012},
	keywords = {Ambient Assisted Living, Component-based system, Dependability analysis},
	pages = {112--131}
}



@article{shin_real-time_1994,
	title = {Real-time computing: a new discipline of computer science and engineering},
	volume = {82},
	issn = {0018-9219},
	shorttitle = {Real-time computing},
	doi = {10.1109/5.259423},
	abstract = {This paper surveys the state of the art in real-time computing. It introduces basic concepts and identifies key issues in the design of real-time systems. Solutions proposed in literature for tackling these issues are also briefly discussed},
	number = {1},
	journal = {Proceedings of the IEEE},
	author = {Shin, K.G. and Ramanathan, P.},
	month = jan,
	year = {1994},
	keywords = {Application software, Automobiles, clock synchronisation, Computer architecture, Computer displays, Computer science, Environmental economics, fault tolerance, fault tolerant computing, Humans, LAN, local area networks, multiprocessing systems, operating systems (computers), Processor scheduling, real-time computing, real-time OS, real-time systems, Real time systems, redundancy, redundancy management, Resource management, reviews, scheduling, synchronisation, Wheels},
	pages = {6--24}
}



@article{thum_classification_2014,
	title = {A {Classification} and {Survey} of {Analysis} {Strategies} for {Software} {Product} {Lines}},
	volume = {47},
	doi = {10.1145/2580950},
	number = {1},
	journal = {ACM Comput. Surv.},
	author = {Thüm, Thomas and Apel, Sven and Kästner, Christian and Schaefer, Ina and Saake, Gunter},
	month = jun,
	year = {2014},
	keywords = {model checking, Product-line analysis, program family, software analysis, software product line, static analysis, theorem proving, type checking},
	pages = {6:1--6:45},
}

@inproceedings{Iris1993,
    address = {Santa Clara, California, USA},
    author = {Iris, R. and Erica, Bahar and Frohm, A. and Gaona, Charles M. and Hachtel, Gary D. and Macii, Enrico and Pardo, Abelardo and Somenzi, Fabio},
    booktitle = {Proceedings of the 1993 IEEE/ACM International Conference on Computer-aided Design (ICCAD '93)},
    doi = {10.1109/ICCAD.1993.580054},
    file = {:home/thiago/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Iris et al. - 2013 - fulltext.pdf:pdf},
    keywords = {add},
    mendeley-groups = {Supervision/Decision Diagrams},
    mendeley-tags = {add},
    pages = {188--191},
    publisher = {IEEE Computer Society Press},
    title = {{Algebraic Decision Diagrams and Their Applications}},
    year = {1993}
}

@inproceedings{Filieri_pmctool_2012,
 author = {Filieri, Antonio and Ghezzi, Carlo},
 title = {Further Steps Towards Efficient Runtime Verification: Handling Probabilistic Cost Models},
 booktitle = {Proceedings of the First International Workshop on Formal Methods in Software Engineering: Rigorous and Agile Approaches},
 series = {FormSERA '12},
 year = {2012},
 isbn = {978-1-4673-1906-5},
 location = {Zurich, Switzerland},
 pages = {2--8},
 numpages = {7},
 acmid = {2663691},
 publisher = {IEEE Press},
 address = {Piscataway, NJ, USA},
} 



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% BOOK

@book{apel_feature-oriented_2013,
	address = {Berlin},
	title = {Feature-oriented software product lines: concepts and implementation},
	isbn = {978-3-642-37521-7 978-3-642-37520-0},
	shorttitle = {Feature-oriented software product lines},
	publisher = {Springer},
	editor = {Apel, Sven and Batory, Don and Kästner, Christian and Saake, Gunter},
	year = {2013},
	keywords = {Computer science, Feature Driven Development, Information Systems, Produktlinie, Software Engineering, Softwareprodukt}
}




@book{clements_software_2002,
	address = {Boston},
	series = {The {SEI} series in software engineering},
	title = {Software product lines: practices and patterns},
	isbn = {978-0-201-70332-0},
	shorttitle = {Software product lines},
	publisher = {Addison-Wesley},
	author = {Clements, Paul and Northrop, Linda},
	year = {2002},
	keywords = {Computer software, Development}
}



@book{clarke_model_1999,
	address = {Cambridge, Mass},
	title = {Model checking},
	isbn = {978-0-262-03270-4},
	publisher = {MIT Press},
	author = {Clarke, E. M. and Grumberg, Orna and Peled, Doron A.},
	year = {1999},
	keywords = {Computer systems, verification}
}




@book{czarnecki_generative_2000,
	address = {Boston},
	title = {Generative programming: methods, tools, and applications},
	isbn = {978-0-201-30977-5},
	shorttitle = {Generative programming},
	publisher = {Addison Wesley},
	author = {Czarnecki, Krzysztof and Eisenecker, Ulrich},
	year = {2000},
	keywords = {Generative programming (Computer science)}
}



@book{linden_software_2007,
	address = {Berlin ; New York},
	title = {Software product lines in action: the best industrial practice in product line engineering},
	shorttitle = {Software product lines in action},
	publisher = {Springer},
	author = {Linden, Frank van der and Schmid, Klaus and Rommes, Eelco},
	year = {2007},
	keywords = {Computer software, Development, Software Engineering}
}



@book{pohl_software_2010,
	address = {New York, NY},
	title = {Software product line engineering: foundations, principles, and techniques},
	shorttitle = {Software product line engineering},
	publisher = {Springer},
	author = {Pohl, Klaus and Böckle, Günter and Linden, Frank van der},
	year = {2010}
}



@book{baier_principles_2008,
    author = {Baier, Christel and Katoen, Joost-Pieter},
    title = {Principles of Model Checking (Representation and Mind Series)},
    year = {2008},
    isbn = {026202649X, 9780262026499},
    publisher = {The MIT Press},
}


@book{wohlin_experimentation_2012,
	address = {New York},
	title = {Experimentation in software engineering},
	isbn = {978-3-642-29043-5},
	publisher = {Springer},
	author = {Wohlin, Claes},
	year = {2012}
}




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% INBOOK



@Inbook{Dimovski2015,
author="Dimovski, Aleksandar S.  and Al-Sibahi, Ahmad Salim and Brabrand, Claus
	and W{\k{a}}sowski, Andrzej",
editor="Fischer, Bernd and Geldenhuys, Jaco",
title="Family-Based Model Checking Without a Family-Based Model Checker",
bookTitle="Model Checking Software: 22nd International Symposium, SPIN 2015,
        Stellenbosch, South Africa, August 24-26, 2015, Proceedings",
year="2015",
publisher="Springer International Publishing",
address="Cham",
pages="282--299",
abstract="Many software systems are variational: they can be configured to meet diverse sets of requirements. Variability is found in both communication protocols and discrete controllers of embedded systems. In these areas, model checking is an important verification technique. For variational models (systems with variability), specialized family-based model checking algorithms allow efficient verification of multiple variants, simultaneously. These algorithms scale much better than ``brute force'' verification of individual systems, one-by-one. Nevertheless, they can deal with only very small variational models.",
isbn="978-3-319-23404-5",
doi="10.1007/978-3-319-23404-5_18",
}




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% INCOLLECTION



@incollection{dubslaff_probabilistic_2015,
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Probabilistic {Model} {Checking} for {Feature}-{Oriented} {Systems}},
	copyright = {©2015 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-662-46733-6 978-3-662-46734-3},
	number = {8989},
	booktitle = {Transactions on {Aspect}-{Oriented} {Software} {Development} {XII}},
	publisher = {Springer Berlin Heidelberg},
	author = {Dubslaff, Clemens and Baier, Christel and Kluppelholz, Sascha},
	editor = {Chiba, Shigeru and Tanter, Eric and Ernst, Erik and Hirschfeld, Robert},
	year = {2015},
	note = {DOI: 10.1007/978-3-662-46734-3\_5},
	keywords = {Programming Languages, Compilers, Interpreters, Programming Techniques, Software Engineering},
	pages = {180--220}
}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% INPROCEEDINGS



@inproceedings{bodden_spllift:_2013,
	address = {New York, NY, USA},
	series = {{PLDI} '13},
	title = {{SPLLIFT}: {Statically} {Analyzing} {Software} {Product} {Lines} in {Minutes} {Instead} of {Years}},
	isbn = {978-1-4503-2014-6},
	shorttitle = {{SPLLIFT}},
	doi = {10.1145/2491956.2491976},
	booktitle = {Proceedings of the 34th {ACM} {SIGPLAN} {Conference} on {Programming} {Language} {Design} and {Implementation}},
	publisher = {ACM},
	author = {Bodden, Eric and Tolêdo, Társis and Ribeiro, Márcio and Brabrand, Claus and Borba, Paulo and Mezini, Mira},
	year = {2013},
	keywords = {context sensitive, flow sensitive, inter-procedural static analysis, software product lines},
	pages = {355--364}
}






@inproceedings{classen_model_2010,
	address = {New York, NY, USA},
	series = {{ICSE} '10},
	title = {Model {Checking} {Lots} of {Systems}: {Efficient} {Verification} of {Temporal} {Properties} in {Software} {Product} {Lines}},
	isbn = {978-1-60558-719-6},
	shorttitle = {Model {Checking} {Lots} of {Systems}},
	doi = {10.1145/1806799.1806850},
	booktitle = {Proceedings of the 32Nd {ACM}/{IEEE} {International} {Conference} on {Software} {Engineering} - {Volume} 1},
	publisher = {ACM},
	author = {Classen, Andreas and Heymans, Patrick and Schobbens, Pierre-Yves and Legay, Axel and Raskin, Jean-François},
	year = {2010},
	keywords = {features, Software product lines, Specification},
	pages = {335--344},
	file = {ACM Full Text PDF:/home/andlanna/.zotero/zotero/ffazohx1.default/zotero/storage/GN676ZUQ/Classen et al. - 2010 - Model Checking Lots of Systems Efficient Verifica.pdf:application/pdf}
}



@inproceedings{classen_symbolic_2011,
	title = {Symbolic model checking of software product lines},
	doi = {10.1145/1985793.1985838},
	booktitle = {2011 33rd {International} {Conference} on {Software} {Engineering} ({ICSE})},
	author = {Classen, A. and Heymans, P. and Schobbens, P. and Legay, A.},
	year = {2011},
	keywords = {Boolean functions, Computational modeling, computation tree logic, Encoding, Explosions, featured transition system, features, formal logic, NuSMV language, product development, program testing, program verification, Rain, Semantics, Software, software product line, software product lines, software reusability, Specification, SPL behaviour, symbolic model checking, symbolic representation, system verification, temporal property, tool infrastructure},
	pages = {321--330},
	file = {Classen et al. - 2011 - Symbolic model checking of software product lines.pdf:/home/andlanna/.zotero/zotero/ffazohx1.default/zotero/storage/HFE6GMF2/Classen et al. - 2011 - Symbolic model checking of software product lines.pdf:application/pdf}
}




@inproceedings{czarnecki_verifying_2006,
	title = {Verifying feature-based model templates against well-formedness {OCL} constraints},
	isbn = {978-1-59593-237-2},
	doi = {10.1145/1173706.1173738},
	publisher = {ACM Press},
	author = {Czarnecki, Krzysztof and Pietroszek, Krzysztof},
	year = {2006},
	pages = {211}
}

@inproceedings{daws_pmc,
  address = {Berlin, Heidelberg},
  author = {Daws, Conrado},
  booktitle = {Proceedings of the First International Conference on Theoretical Aspects of Computing},
  doi = {10.1007/b107116},
  editor = {Liu, Zhiming and Araki, Keijiro},
  isbn = {978-3-540-25304-4},
  keywords = {dtmc,model checking,parametric model checking},
  month = {sep},
  pages = {280--294},
  publisher = {Springer Berlin Heidelberg},
  series = {Lecture Notes in Computer Science},
  title = {{Symbolic and Parametric Model Checking of Discrete-time Markov Chains}},
  volume = {3407},
  year = {2005}
}



@inproceedings{dubslaff_probabilistic_2014,
	address = {New York, NY, USA},
	series = {{MODULARITY} '14},
	title = {Probabilistic {Model} {Checking} for {Energy} {Analysis} in {Software} {Product} {Lines}},
	isbn = {978-1-4503-2772-5},
	doi = {10.1145/2577080.2577095},
	abstract = {In a software product line (SPL), a collection of software products is defined by their commonalities in terms of features rather than explicitly specifying all products one-by-one. Several verification techniques were adapted to establish temporal properties of SPLs. Symbolic and family-based model checking have been proven to be successful for tackling the combinatorial blow-up arising when reasoning about several feature combinations. However, most formal verification approaches for SPLs presented in the literature focus on the static SPLs, where the features of a product are fixed and cannot be changed during runtime. This is in contrast to dynamic SPLs, allowing to adapt feature combinations of a product dynamically after deployment. The main contribution of the paper is a compositional modeling framework for dynamic SPLs, which supports probabilistic and nondeterministic choices and allows for quantitative analysis. We specify the feature changes during runtime within an automata-based coordination component, enabling to reason over strategies how to trigger dynamic feature changes for optimizing various quantitative objectives, e.g., energy or monetary costs and reliability. For our framework there is a natural and conceptually simple translation into the input language of the prominent probabilistic model checker PRISM. This facilitates the application of PRISM's powerful symbolic engine to the operational behavior of dynamic SPLs and their family-based analysis against various quantitative queries. We demonstrate feasibility of our approach by a case study issuing an energy-aware bonding network device.},
	booktitle = {Proceedings of the 13th {International} {Conference} on {Modularity}},
	publisher = {ACM},
	author = {Dubslaff, Clemens and Klüppelholz, Sascha and Baier, Christel},
	year = {2014},
	keywords = {dynamic features, energy analysis, probabilistic model checking, software product lines},
	pages = {169--180},
	file = {Dubslaff et al. - 2014 - Probabilistic Model Checking for Energy Analysis i.pdf:/home/andlanna/.zotero/zotero/ffazohx1.default/zotero/storage/KEA2552V/Dubslaff et al. - 2014 - Probabilistic Model Checking for Energy Analysis i.pdf:application/pdf}
}




@inproceedings{ferreira_leite_automating_2015,
	title = {Automating {Resource} {Selection} and {Configuration} in {Inter}-clouds through a {Software} {Product} {Line} {Method}},
	doi = {10.1109/CLOUD.2015.101},
	booktitle = {2015 {IEEE} 8th {International} {Conference} on {Cloud} {Computing} ({CLOUD})},
	author = {Ferreira Leite, A. and Alves, V. and Nunes Rodrigues, G. and Tadonki, C. and Eisenbeis, C. and Magalhaes Alves de Melo, A.C.},
	month = jun,
	year = {2015},
	keywords = {Benchmark testing, cloud computing, cloud provider, cloud resource selection, cloud users, Computational modeling, Concrete, declarative strategy, electronic mail, Engines, error prone activity, functional dependency, goal oriented strategy, Google, intercloud computing configuration, resource allocation, resource configuration, software product line engineering, software product lines, SPL-based engineering method, system administrators, temporal dependency, time consuming activity, Virtual machining},
	pages = {726--733},
	file = {IEEE Xplore Abstract Record:/home/andlanna/.zotero/zotero/ffazohx1.default/zotero/storage/QXRXWQQR/articleDetails.html:text/html}
}



@inproceedings{grunske_specification_2008,
 author = {Grunske, Lars},
 title = {Specification patterns for probabilistic quality properties},
 booktitle = {ICSE '08},
 year = {2008},
 location = {Leipzig, Germany},
 pages = {31--40},
 numpages = {10},
 doi = {10.1145/1368088.1368094},
 acmid = {1368094},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {csl, pctl, pctl*, performance, probabilistic quality, probabilistic quality patterns, reliability, safety, security, specification patterns},
}



@inproceedings{Hahn_param_2010,
  author    = {Ernst Moritz Hahn and
               Holger Hermanns and
               Bj{\"o}rn Wachter and
               Lijun Zhang},
  title     = {PARAM: A Model Checker for Parametric Markov Models},
  booktitle = {CAV},
  year      = {2010},
  pages     = {660-664},
  abstract = {
  We present PARAM 1.0, a model checker for parametric discrete-time
  Markov chains (PMCs). PARAM can evaluate temporal properties of
  PMCs and certain extensions of this class. Due to parametricity,
  evaluation results are polynomials or rational functions. By
  instantiating the parameters in the result function, one can cheaply
  obtain results for multiple individual instantiations, based on only
  a single more expensive analysis. In addition, it is possible to
  post-process the result function symbolically using for instance
  computer algebra packages, to derive optimum parameters or to
  identify worst cases.}
}


@article{HahnHZ10,
    author    = {Hahn, Ernst and Hermanns, Holger and Zhang, Lijun},
    title     = {Probabilistic reachability for parametric Markov models},
    journal   = {STTT},
    publisher = {Springer},
    pages     = {1-17},
    year      = {2010}
}


@inproceedings{Kastner_2008,
  author    = {Christian K{\"{a}}stner and
               Sven Apel and
               Martin Kuhlemann},
  title     = {Granularity in software product lines},
  booktitle = {30th International Conference on Software Engineering {(ICSE} 2008),
               Leipzig, Germany, May 10-18, 2008},
  pages     = {311--320},
  year      = {2008},
  url       = {http://doi.acm.org/10.1145/1368088.1368131},
  doi       = {10.1145/1368088.1368131},
  timestamp = {Sun, 04 Jun 2017 10:09:48 +0200},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/icse/KastnerAK08},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}



@inproceedings{kowal_scaling_2015,
	title = {Scaling {Size} and {Parameter} {Spaces} in {Variability}-{Aware} {Software} {Performance} {Models} ({T})},
	doi = {10.1109/ASE.2015.16},
	booktitle = {2015 30th {IEEE}/{ACM} {International} {Conference} on {Automated} {Software} {Engineering} ({ASE})},
	author = {Kowal, Matthias and Tschaikowski, Max and Tribastone, Mirco and Schaefer, Ina},
	month = nov,
	year = {2015},
	keywords = {Analytical models, Computational modeling, Mathematical model, Numerical models, Software performance, Uncertainty, Unified Modeling Language},
	pages = {407--417}
}



@inproceedings{liang_sat-based_2015,
	address = {New York, NY, USA},
	series = {{SPLC} '15},
	title = {{SAT}-based {Analysis} of {Large} {Real}-world {Feature} {Models} is {Easy}},
	isbn = {978-1-4503-3613-0},
	doi = {10.1145/2791060.2791070},
	abstract = {Modern conflict-driven clause-learning (CDCL) Boolean SAT solvers provide efficient automatic analysis of real-world feature models (FM) of systems ranging from cars to operating systems. It is well-known that solver-based analysis of real-world FMs scale very well even though SAT instances obtained from such FMs are large, and the corresponding analysis problems are known to be NP-complete. To better understand why SAT solvers are so effective, we systematically studied many syntactic and semantic characteristics of a representative set of large real-world FMs. We discovered that a key reason why large real-world FMs are easy-to-analyze is that the vast majority of the variables in these models are unrestricted, i.e., the models are satisfiable for both true and false assignments to such variables under the current partial assignment. Given this discovery and our understanding of CDCL SAT solvers, we show that solvers can easily find satisfying assignments for such models without too many backtracks relative to the model size, explaining why solvers scale so well. Further analysis showed that the presence of unrestricted variables in these real-world models can be attributed to their high-degree of variability. Additionally, we experimented with a series of well-known nonbacktracking simplifications that are particularly effective in solving FMs. The remaining variables/clauses after simplifications, called the core, are so few that they are easily solved even with backtracking, further strengthening our conclusions. We explain the connection between our findings and backdoors, an idea posited by theorists to explain the power of SAT solvers. This connection strengthens our hypothesis that SAT-based analysis of FMs is easy. In contrast to our findings, previous research characterizes the difficulty of analyzing randomly-generated FMs in terms of treewidth. Our experiments suggest that the difficulty of analyzing real-world FMs cannot be explained in terms of treewidth.},
	booktitle = {Proceedings of the 19th {International} {Conference} on {Software} {Product} {Line}},
	publisher = {ACM},
	author = {Liang, Jia Hui and Ganesh, Vijay and Czarnecki, Krzysztof and Raman, Venkatesh},
	year = {2015},
	keywords = {feature model, SAT-based analysis},
	pages = {91--100},
	file = {Liang et al. - 2015 - SAT-based Analysis of Large Real-world Feature Mod.pdf:/home/andlanna/.zotero/zotero/ffazohx1.default/zotero/storage/VXWZXHE5/Liang et al. - 2015 - SAT-based Analysis of Large Real-world Feature Mod.pdf:application/pdf}
}



@inproceedings{mendonca:2009,
 author = {Mendonca, Marcilio and Branco, Moises and Cowan, Donald},
 title = {S.P.L.O.T.: Software Product Lines Online Tools},
 booktitle = {Proceedings of the 24th ACM SIGPLAN Conference Companion on Object Oriented Programming Systems Languages and Applications},
 series = {OOPSLA '09},
 year = {2009},
 isbn = {978-1-60558-768-4},
 location = {Orlando, Florida, USA},
 pages = {761--762},
 numpages = {2},
 doi = {10.1145/1639950.1640002},
 acmid = {1640002},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {automated reasoning, feature model automated analysis, feature models, interactive configuration, software product lines},
} 







@inproceedings{nunes_variability_2012,
	title = {Variability {Management} of {Reliability} {Models} in {Software} {Product} {Lines}: {An} {Expressiveness} and {Scalability} {Analysis}},
	shorttitle = {Variability {Management} of {Reliability} {Models} in {Software} {Product} {Lines}},
	doi = {10.1109/SBCARS.2012.23},
	booktitle = {2012 {Sixth} {Brazilian} {Symposium} on {Software} {Components} {Architectures} and {Reuse} ({SBCARS})},
	author = {Nunes, V. and Fernandes, P. and Alves, V. and Rodrigues, G.},
	month = sep,
	year = {2012},
	keywords = {critical systems, Dependability, Electrocardiography, Formal verification, Markov processes, model checking, parametric arithmetic formula, parametric model-checking technique, Parametric statistics, Reliability, reliability models, scalability analysis, Software, software management, software product lines, software reliability, SPL, variability management},
	pages = {51--60}
}



@inproceedings{rodrigues_modeling_2015,
	title = {Modeling and {Verification} for {Probabilistic} {Properties} in {Software} {Product} {Lines}},
	doi = {10.1109/HASE.2015.34},
	booktitle = {2015 {IEEE} 16th {International} {Symposium} on {High} {Assurance} {Systems} {Engineering} ({HASE})},
	author = {Genaina Nunes Rodrigues and Vander Alves and Vinicius Nunes and Andre Lanna and Maxime Cordy and Pierre-Yves Schobbens and Amir Molzam Sharifloo and Axel Legay},
	month = jan,
	year = {2015},
	keywords = {approximate formula, arithmetic decision diagram, bounded verification, Computational modeling, decision diagrams, DTMC, FDTMC, feature-aware discrete-time Markov chains, Markov processes, Mathematical model, parametric model checking, Parametric statistics, parametric techniques, Probabilistic logic, probabilistic properties modeling, probabilistic properties verification, probabilistic verification, probability, product lines availability, product lines reliability, program verification, Reliability, Software, software product lines, vital signal monitoring system prototype},
	pages = {173--180},
}



@inproceedings{siegmund_family-based_2013,
	address = {New York, NY, USA},
	series = {{GPCE} '13},
	title = {Family-based {Performance} {Measurement}},
	isbn = {978-1-4503-2373-4},
	doi = {10.1145/2517208.2517209},
	abstract = {Most contemporary programs are customizable. They provide many features that give rise to millions of program variants. Determining which feature selection yields an optimal performance is challenging, because of the exponential number of variants. Predicting the performance of a variant based on previous measurements proved successful, but induces a trade-off between the measurement effort and prediction accuracy. We propose the alternative approach of family-based performance measurement, to reduce the number of measurements required for identifying feature interactions and for obtaining accurate predictions. The key idea is to create a variant simulator (by translating compile-time variability to run-time variability) that can simulate the behavior of all program variants. We use it to measure performance of individual methods, trace methods to features, and infer feature interactions based on the call graph. We evaluate our approach by means of five feature-oriented programs. On average, we achieve accuracy of 98\%, with only a single measurement per customizable program. Observations show that our approach opens avenues of future research in different domains, such an feature-interaction detection and testing.},
	booktitle = {Proceedings of the 12th {International} {Conference} on {Generative} {Programming}: {Concepts} \& {Experiences}},
	publisher = {ACM},
	author = {Siegmund, Norbert and von Rhein, Alexander and Apel, Sven},
	year = {2013},
	keywords = {family-based analysis, featurehouse, performance prediction},
	pages = {95--104},
	file = {Siegmund et al. - 2013 - Family-based Performance Measurement.pdf:/home/andlanna/.zotero/zotero/ffazohx1.default/zotero/storage/E2RVVXUM/Siegmund et al. - 2013 - Family-based Performance Measurement.pdf:application/pdf}
}



@inproceedings{schobbens_feature_2006,
	title = {Feature {Diagrams}: {A} {Survey} and a {Formal} {Semantics}},
	shorttitle = {Feature {Diagrams}},
	doi = {10.1109/RE.2006.23},
	booktitle = {Requirements {Engineering}, 14th {IEEE} {International} {Conference}},
	author = {Schobbens, P. and Heymans, P. and Trigaux, J.-C.},
	month = sep,
	year = {2006},
	keywords = {engineering requirements, feature oriented domain analysis method, formal semantics, formal specification, Formal verification, free feature diagrams, modelling languages, software product lines},
	pages = {139--148}
}



@inproceedings{varshosaz_model_2014,
	title = {Model {Checking} of {Software} {Product} {Lines} in {Presence} of {Nondeterminism} and {Probabilities}},
	volume = {1},
	doi = {10.1109/APSEC.2014.18},
	abstract = {Nowadays, Software Product Lines (SPLs) are being used in a variety of domains including safety-critical systems for which verification of the systems is a matter of concern. Formal modeling and verification of SPLs has been majorly investigated recently. Due to the potential large number of the products in a SPL, individual verification of all products could be costly or even impractical. Hence, there is a need for verification methods that can verify the whole family's behavior at once. In this paper, we focus on the probabilistic model checking of software product lines in which the behavior of individual products can be described in terms of Markov decision processes. We introduce a mathematical model, Markov Decision Process Family (MDPF), to compactly represent the behavior of the whole family. We also provide a model checking algorithm in order to verify MDPFs against properties expressed in probabilistic computational tree logic.},
	booktitle = {Software {Engineering} {Conference} ({APSEC}), 2014 21st {Asia}-{Pacific}},
	author = {Varshosaz, M. and Khosravi, R.},
	month = dec,
	year = {2014},
	keywords = {formal modeling, Formal verification, Integrated circuits, Markov Decision Process, Markov decision process family, Markov processes, Mathematical model, MDPF, Media, model checking, nondeterminism, probabilistic computational tree logic, Probabilistic logic, probabilistic model checking, probability, program verification, Software, software product line, software product lines, SPL, trees (mathematics)},
	pages = {63--70},
	file = {Varshosaz and Khosravi - 2014 - Model Checking of Software Product Lines in Presen.pdf:/home/andlanna/.zotero/zotero/ffazohx1.default/zotero/storage/RKR5ZQJZ/Varshosaz and Khosravi - 2014 - Model Checking of Software Product Lines in Presen.pdf:application/pdf}
}



@inproceedings{walkingshaw_variational_2014,
	address = {New York, NY, USA},
	series = {Onward! 2014},
	title = {Variational {Data} {Structures}: {Exploring} {Tradeoffs} in {Computing} with {Variability}},
	shorttitle = {Variational {Data} {Structures}},
	doi = {10.1145/2661136.2661143},
	booktitle = {Proceedings of the 2014 {ACM} {International} {Symposium} on {New} {Ideas}, {New} {Paradigms}, and {Reflections} on {Programming} \& {Software}},
	publisher = {ACM},
	author = {Walkingshaw, Eric and Kästner, Christian and Erwig, Martin and Apel, Sven and Bodden, Eric},
	year = {2014},
	keywords = {configurable software, data structures, software product lines, variability-aware analyses, variation},
	pages = {213--226}
}

@article{ReliableAndMaintainableDSPL,
title = "Building reliable and maintainable Dynamic Software Product Lines: An investigation in the Body Sensor Network domain ",
journal = "Information and Software Technology ",
volume = "86",
number = "",
pages = "54 - 70",
year = "2017",
note = "",
issn = "0950-5849",
doi = "https://doi.org/10.1016/j.infsof.2017.02.002",
author = "Leonardo Pessoa and Paula Fernandes and Thiago Castro and Vander Alves and Genaína N. Rodrigues and Hervaldo Carvalho"
}





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% MISC
@inproceedings{spl-hall-of-fame,
    author = {Weiss, David M.}, 
    title = {The Product Line Hall of Fame},
    booktitle = {Proceedings of the 12th International Software Product Line Conference ({SPLC})},
    year = {2008},
    isbn = {978-0-7695-3303-2},
    pages = {395},
    doi = {10.1109/SPLC.2008.56},
    acmid = {1439998},
    publisher = {IEEE Computer Society},
    address = {Washington, DC, USA},
    keywords = {software product lines, product line hall of fame},
}


@misc{spl2go,
    author={{University of Magdeburg}, Otto von Guericke},
    title = {{SPL2go}},
    howpublished = {Available at \url{http://spl2go.cs.ovgu.de/}},
    year = {2011},
    note = {Accessed: 2016-01-27}
}


@misc{uml-marte-profile,
    author = {{Object Management Group}},
    title = {The {UML} Profile for {MARTE}: Modeling and Analysis of Real-Time and Embedded Systems},
    howpublished = {http://www.omg.org/omgmarte/},
    year = {2011},
    note = "Version 1.1",
}




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% TECHREPORT


@techreport{kang_1990,
	Author = {K. Kang and S. Cohen and J. Hess and W. Novak and S. Peterson},
	Available = {1},
	Category = {Requirements Engineering},
	File = {:Users/acs/Documents/Andreas/PhD/_bib/Classified/Papers/Kang1990 - Feature-Oriented Domain Analysis Feasibility Study.pdf:PDF},
	Keywords = {feature diagrams, Requirements Engineering, requirement engineering},
	Method = {FODA},
	Number = {CMU/SEI-90-TR-21},
	Title = {Feature-Oriented Domain Analysis {(FODA)} Feasibility Study},
	Year = {1990}}

@article{featureide,
 author = {Th\"{u}m, Thomas and K\"{a}stner, Christian and Benduhn, Fabian and Meinicke, Jens and Saake, Gunter and Leich, Thomas},
 title = {FeatureIDE: An Extensible Framework for Feature-oriented Software Development},
 journal = {Sci. Comput. Program.},
 issue_date = {January, 2014},
 volume = {79},
 month = jan,
 year = {2014},
 issn = {0167-6423},
 pages = {70--85},
 numpages = {16},
 doi = {10.1016/j.scico.2012.06.002},
 acmid = {2537315},
 publisher = {Elsevier North-Holland, Inc.},
 address = {Amsterdam, The Netherlands, The Netherlands},
 keywords = {Aspect-oriented programming, Delta-oriented programming, Feature modeling, Feature-oriented programming, Feature-oriented software development, Preprocessors, Software product lines, Tool support},
} 

@book{CormenAlgorithms,
 author = {Cormen, Thomas H. and Stein, Clifford and Rivest, Ronald L. and Leiserson, Charles E.},
 title = {Introduction to Algorithms},
 year = {2001},
 isbn = {0070131511},
 edition = {2nd},
 publisher = {McGraw-Hill Higher Education},
}
